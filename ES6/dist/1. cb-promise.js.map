{"version":3,"sources":["../src/1. cb-promise.js"],"names":["fs","require","readFile","err","data","console","log","JSON","parse","name","readFileAsync","path","Promise","resolve","reject","then","catch","util","promisify"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;;AAEA;AACAD,GAAGE,QAAH,CAAY,gBAAZ,EAA8B,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC3C,MAAID,GAAJ,EAAS,OAAOE,QAAQC,GAAR,CAAYH,GAAZ,CAAP;;AAETC,SAAOG,KAAKC,KAAL,CAAWJ,IAAX,CAAP;AACAC,UAAQC,GAAR,0CAAqBF,KAAKK,IAA1B;AACD,CALD;;AAOA;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,OAAGE,QAAH,CAAYS,IAAZ,EAAkB,UAACR,GAAD,EAAMC,IAAN,EAAe;AAC/B,UAAID,GAAJ,EAAS,OAAOW,OAAOX,GAAP,CAAP,CAAT,KACKU,QAAQT,IAAR;AACN,KAHD;AAID,GALM,CAAP;AAMD;;AAEDM,cAAc,gBAAd,EACGK,IADH,CACQ,gBAAQ;AACZX,SAAOG,KAAKC,KAAL,CAAWJ,IAAX,CAAP;AACAC,UAAQC,GAAR,+BAAyBF,KAAKK,IAA9B;AACD,CAJH,EAKGO,KALH,CAKS,eAAO;AACZX,UAAQC,GAAR,CAAYH,GAAZ;AACD,CAPH;;AAUA;AACA,IAAMc,OAAOhB,QAAQ,MAAR,CAAb;;AAEAgB,KAAKC,SAAL,CAAelB,GAAGE,QAAlB,EAA4B,gBAA5B,EACGa,IADH,CACQR,KAAKC,KADb,EAEGO,IAFH,CAEQ,gBAAQ;AACZV,UAAQC,GAAR,qDAAgCF,KAAKK,IAArC;AACD,CAJH,EAKGO,KALH,CAKS,eAAO;AACZX,UAAQC,GAAR,CAAYH,GAAZ;AACD,CAPH","file":"1. cb-promise.js","sourcesContent":["const fs = require('fs');\n\n// 回调式编程\nfs.readFile('./package.json', (err, data) => {\n  if (err) return console.log(err)\n\n  data = JSON.parse(data)\n  console.log(`回调式编程：${data.name}`)\n})\n\n// 使用Promise: 过渡式写法\nfunction readFileAsync(path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, data) => {\n      if (err) return reject(err)\n      else resolve(data)\n    })\n  })\n}\n\nreadFileAsync('./package.json')\n  .then(data => {\n    data = JSON.parse(data)\n    console.log(`Promise编程：${data.name}`)\n  })\n  .catch(err => {\n    console.log(err)\n  })\n\n\n// 将回调转化成Promise\nconst util = require('util')\n\nutil.promisify(fs.readFile)('./package.json')\n  .then(JSON.parse)\n  .then(data => {\n    console.log(`util将回调转化promise：${data.name}`)\n  })\n  .catch(err => {\n    console.log(err)\n  })"]}