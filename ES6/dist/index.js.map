{"version":3,"sources":["../src/index.js"],"names":["readAsync","data","JSON","parse","console","log","name","init","fs","require","readFile","cb","err","readFileAsync","path","Promise","resolve","reject","then","catch","co","util","promisify"],"mappings":";;;;;;;;;;AAiDsD;;;sFAEtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmBA,UAAU,gBAAV,CADnB;;AAAA;AACMC,gBADN;;;AAGEA,mBAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,oBAAQC,GAAR,6BAAuBJ,KAAKK,IAA5B;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,I;;;;;;;AAnDf,IAAMC,KAAKC,QAAQ,IAAR,CAAX;;AAEA;AACA;AACA,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACpBH,KAAGE,QAAH,CAAY,gBAAZ,EAA8B,UAACE,GAAD,EAAMX,IAAN,EAAe;AAC3C,QAAIW,GAAJ,EAAS,OAAOD,GAAGC,GAAH,CAAP;AACTD,OAAG,IAAH,EAASV,IAAT;AACD,GAHD;AAID;;AAEDS,SAAS,UAACE,GAAD,EAAMX,IAAN,EAAe;AACtB,MAAI,CAACW,GAAL,EAAU;AACRX,WAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,YAAQC,GAAR,CAAY,OAAZ,EAAqBJ,KAAKK,IAA1B;AACD;AACF,CALD;;AAOA;AACA,SAASO,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCT,OAAGE,QAAH,CAAYI,IAAZ,EAAkB,UAACF,GAAD,EAAMX,IAAN,EAAe;AAC/B,UAAIW,GAAJ,EAAS,OAAOK,OAAOL,GAAP,CAAP,CAAT,KACKI,QAAQf,IAAR;AACN,KAHD;AAID,GALM,CAAP;AAMD;;AAEDY,cAAc,gBAAd,EACGK,IADH,CACQ,gBAAQ;AACZjB,SAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,UAAQC,GAAR,+BAAyBJ,KAAKK,IAA9B;AACD,CAJH,EAKGa,KALH,CAKS,eAAO;AACZf,UAAQC,GAAR,CAAYO,GAAZ;AACD,CAPH;;AASA;AACA,IAAMQ,KAAKX,QAAQ,IAAR,CAAX;AACA,IAAMY,OAAOZ,QAAQ,MAAR,CAAb;;AAEAW,4CAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACgBC,KAAKC,SAAL,CAAed,GAAGE,QAAlB,EAA4B,gBAA5B,CADhB;;AAAA;AACGT,cADH;;;AAGDA,iBAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,kBAAQC,GAAR,iCAA2BJ,KAAKK,IAAhC;;AAJC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAH;;AAOA;AACA,IAAMN,YAAYqB,KAAKC,SAAL,CAAed,GAAGE,QAAlB,CAAlB;AAQAH","file":"index.js","sourcesContent":["const fs = require('fs');\n\n// 处理异步变迁的历史--->\n// 第一阶段：回调函数\nfunction readFile(cb) {\n  fs.readFile('./package.json', (err, data) => {\n    if (err) return cb(err)\n    cb(null, data)\n  })\n}\n\nreadFile((err, data) => {\n  if (!err) {\n    data = JSON.parse(data)\n    console.log('回调编程：', data.name)\n  }\n})\n\n// 第二阶段：Promise\nfunction readFileAsync(path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, data) => {\n      if (err) return reject(err)\n      else resolve(data)\n    })\n  })\n}\n\nreadFileAsync('./package.json')\n  .then(data => {\n    data = JSON.parse(data)\n    console.log(`promise编程：${data.name}`)\n  })\n  .catch(err => {\n    console.log(err)\n  })\n\n// 第三阶段：generator\nconst co = require('co');\nconst util = require('util');\n\nco(function* () {\n  let data = yield util.promisify(fs.readFile)('./package.json')\n\n  data = JSON.parse(data)\n  console.log(`generator编程：${data.name}`)\n})\n\n// 第四个阶段: Async 统一世界\nconst readAsync = util.promisify(fs.readFile)         //直接拿到Promise\n\nasync function init() {\n  let data = await readAsync('./package.json')\n\n  data = JSON.parse(data)\n  console.log(`async编程：${data.name}`)\n}\ninit()"]}