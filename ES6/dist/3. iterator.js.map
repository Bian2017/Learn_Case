{"version":3,"sources":["../src/3. iterator.js"],"names":["generator","makeIterator","arr","index","next","length","value","done","ite","console","log","i","gen"],"mappings":";;;;;;;;sDAgCUA,S;;AAhCV;AACA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,MAAIC,QAAQ,CAAZ;;AAEA;AACA,SAAO;AACLC,UAAM,gBAAM;AACV,UAAID,QAAQD,IAAIG,MAAhB,EAAwB;AACtB,eAAO;AACLC,iBAAOJ,IAAIC,OAAJ,CADF;AAELI,gBAAM;AAFD,SAAP;AAID,OALD,MAKO;AACL,eAAO;AACLA,gBAAM;AADD,SAAP;AAGD;AACF;AAZI,GAAP;AAcD;;AAED,IAAIC,MAAMP,aAAa,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,CAAb,CAAV;;AAEA;AACAQ,QAAQC,GAAR,CAAY,OAAZ,EAAqBF,IAAIJ,IAAJ,GAAWE,KAAhC;AACAG,QAAQC,GAAR,CAAY,QAAZ,EAAsBF,IAAIJ,IAAJ,GAAWE,KAAjC;AACAG,QAAQC,GAAR,CAAY,OAAZ,EAAqBF,IAAIJ,IAAJ,GAAWE,KAAhC;AACAG,QAAQC,GAAR,CAAY,MAAZ,EAAoBF,IAAIJ,IAAJ,GAAWG,IAA/B;;AAEA;;AAEA;AACA,SAAUP,SAAV,CAAoBE,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACWS,WADX,GACe,CADf;;AAAA;AAAA,gBACkBA,IAAIT,IAAIG,MAD1B;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAEUH,IAAIS,CAAJ,CAFV;;AAAA;AACkCA,aADlC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,IAAIC,MAAMZ,UAAU,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,CAAV,CAAV;;AAEAS,QAAQC,GAAR,CAAY,OAAZ,EAAqBE,IAAIR,IAAJ,EAArB;AACAK,QAAQC,GAAR,CAAY,QAAZ,EAAsBE,IAAIR,IAAJ,EAAtB;AACAK,QAAQC,GAAR,CAAY,OAAZ,EAAqBE,IAAIR,IAAJ,EAArB;AACAK,QAAQC,GAAR,CAAY,MAAZ,EAAoBE,IAAIL,IAAxB","file":"3. iterator.js","sourcesContent":["// 简易迭代器\nfunction makeIterator(arr) {\n  let index = 0;\n\n  // 返回一个迭代器对象\n  return {\n    next: () => {\n      if (index < arr.length) {\n        return {\n          value: arr[index++],\n          done: false\n        }\n      } else {\n        return {\n          done: true\n        }\n      }\n    }\n  }\n}\n\nlet ite = makeIterator(['eat', 'sleep', 'wakeup'])\n\n// 每次迭代的值都反映了被迭代对象内部的状态\nconsole.log('First', ite.next().value)\nconsole.log('Second', ite.next().value)\nconsole.log('Third', ite.next().value)\nconsole.log('Last', ite.next().done)\n\n/***********************************************************/\n\n// 生成器：生成器的本质是迭代器。每次迭代都是通过yield关键字来实现。通过生成器函数简化了创建迭代器的过程。\nfunction *generator(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    yield arr[i];\n  }\n}\n\nlet gen = generator(['eat', 'sleep', 'wakeup'])\n\nconsole.log('First', gen.next())\nconsole.log('Second', gen.next())\nconsole.log('Third', gen.next())\nconsole.log('Last', gen.done)"]}